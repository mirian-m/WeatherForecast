//
//  CountryViewController.swift
//  MirianMaglakelidze#28
//
//  Created by Admin on 8/30/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CountryDisplayLogic: AnyObject {
    func displayCountries(viewModel: Country.GetCountry.ViewModel)
}

class CountryViewController: UITableViewController, CountryDisplayLogic {
    var interactor: CountryBusinessLogic?
    var router: (NSObjectProtocol & CountryRoutingLogic & CountryDataPassing)?
    
    @IBOutlet weak var countryIndicator: UIActivityIndicatorView!
    private var countries = [CountryModel]()
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        self.countryIndicator.startAnimating()
        viewSetup()
        getCountries()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CountryInteractor()
        let presenter = CountryPresenter()
        let router = CountryRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    func viewSetup() {
        self.tableView.register(CountriesTableViewCell.self, forCellReuseIdentifier: CountriesTableViewCell.identifier)
    }
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func getCountries() {
        let request = Country.GetCountry.Request()
        interactor?.getCountries(request: request)
    }
    
    func displayCountries(viewModel: Country.GetCountry.ViewModel) {
        DispatchQueue.main.async { [weak self] in
            self?.countryIndicator.stopAnimating()
            self?.countries = viewModel.tableModel
            self?.tableView.reloadData()
        }
    }
}

extension CountryViewController {
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        countries.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CountriesTableViewCell.identifier, for: indexPath) as? CountriesTableViewCell else { return UITableViewCell() }
        let currentCountry = countries[indexPath.row]
        cell.countryLb.text = currentCountry.name
        return cell
        
    }
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        100
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        interactor?.tappedCountryData(request: Country.ShowDetails.Request(country: countries[indexPath.row]))
        router?.routeToWeather(segue: nil)
    }
}
